version: '3.8'

services:
  # Aplicação Principal
  platform-devops:
    build: .
    container_name: platform-devops-app
    ports:
      - "3000:3000"
      - "3001:3001"
      - "9090:9090"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres:password@postgres:5432/platform_devops
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
      - prometheus
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    restart: unless-stopped
    networks:
      - platform-network

  # Banco de Dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: platform-devops-db
    environment:
      POSTGRES_DB: platform_devops
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - platform-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: platform-devops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - platform-network

  # Monitoramento - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: platform-devops-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - platform-network

  # Visualização - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: platform-devops-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - platform-network

  # Logs - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: platform-devops-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - platform-network

  # Visualização de Logs - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: platform-devops-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - platform-network

  # Proxy Reverso - Nginx
  nginx:
    image: nginx:alpine
    container_name: platform-devops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - platform-devops
    restart: unless-stopped
    networks:
      - platform-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  platform-network:
    driver: bridge
