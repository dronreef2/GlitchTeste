name: CI/CD Pipeline DevOps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/devops-platform

jobs:
  test:
    name: Testes Automatizados
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: devops_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Executar lint
      run: npm run lint

    - name: Executar testes unitários
      run: npm run test:unit
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devops_test
        REDIS_URL: redis://localhost:6379

    - name: Executar testes de integração
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/devops_test
        REDIS_URL: redis://localhost:6379

    - name: Gerar relatório de cobertura
      run: npm run test:coverage

    - name: Upload cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  security:
    name: Análise de Segurança
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Auditoria de segurança
      run: npm audit --audit-level=high

    - name: Análise de vulnerabilidades
      run: npm run security:check

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript

    - name: Executar CodeQL
      uses: github/codeql-action/analyze@v2

  build:
    name: Build e Análise de Qualidade
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Instalar dependências
      run: npm ci

    - name: Build da aplicação
      run: npm run build

    - name: Análise SonarCloud
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Upload artefatos de build
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  docker:
    name: Build e Push Docker
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login no Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extrair metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build e Push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Deploy para Staging
      run: |
        echo "Executando deploy para ambiente de staging..."
        # Aqui você pode adicionar comandos específicos para seu ambiente
        # Exemplos: kubectl, helm, docker-compose, etc.

    - name: Health Check Staging
      run: |
        echo "Verificando saúde da aplicação em staging..."
        # Executar health checks após deploy

    - name: Notificar Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#devops'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  deploy-production:
    name: Deploy Produção
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Backup antes do deploy
      run: |
        echo "Executando backup antes do deploy..."
        # Comandos de backup específicos

    - name: Deploy para Produção
      run: |
        echo "Executando deploy para produção..."
        # Comandos de deploy para produção

    - name: Health Check Produção
      run: |
        echo "Verificando saúde da aplicação em produção..."
        # Health checks críticos

    - name: Rollback em caso de falha
      if: failure()
      run: |
        echo "Executando rollback automático..."
        # Comandos de rollback

    - name: Notificar equipe
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  performance:
    name: Testes de Performance
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Instalar k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Executar testes de carga
      run: npm run test:performance

    - name: Upload relatórios de performance
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: reports/performance/
